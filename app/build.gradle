import java.text.SimpleDateFormat

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'jacoco'
}

// Create task for reporting test coverage on unit tests run against the debug build of the "local" flavor.
// Note that enabling 'testCoverageEnabled' for the 'debug' build type would create
// the tasks 'create${flavor}CoverageReport' automatically for all flavors.
// However, these tasks include running integration tests which require a device to be connected.
tasks.create(name: "unitTestCoverageReport", type: JacocoReport, dependsOn: "testLocalDebugUnitTest") {
    group = "Verification" // existing group containing tasks for generating linting reports etc.
    description = "Generate Jacoco coverage reports for the 'local' debug build."

    reports {
        html.enabled = true
        // human readable (written into './build/reports/jacoco/unitTestCoverageReport/html')
        xml.enabled = true
        // CI-readable (written into './build/reports/jacoco/unitTestCoverageReport/unitTestCoverageReport.xml')
    }

    // Execution data generated when running the tests against classes instrumented by the JaCoCo agent.
    // This is enabled with 'testCoverageEnabled' in the 'debug' build type.
    executionData.from = "${project.buildDir}/outputs/unit_test_code_coverage/localDebugUnitTest/testLocalDebugUnitTest.exec"

    // Compiled Kotlin class files are written into build-variant-specific subdirectories of 'build/tmp/kotlin-classes'.
    // JaCoCo execution data is a record of the (offsets of?) executed bytecode instructions which are looked up in the class files.
    classDirectories.from = "${project.buildDir}/tmp/kotlin-classes/localDebug"

    // To produce an accurate report, the bytecode is mapped back to the original source code.
    sourceDirectories.from = "${project.projectDir}/src/main/java"
}

// Necessary for coverage to be collected for tests executed by 'RobolectricTestRunner'.
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

def versionBuildNumberSequential = 48

def versionBuildNumberMajor = 1
def versionBuildNumberMinor = 3
def versionBuildNumberPatch = 0

task printVersionName {
    doLast {
        println android.defaultConfig.versionName
    }
}

//def LOCAL_IP = getLocalIPv4()
def LOCAL_IP = "10.0.2.2"
def URL_PROXY_BASE_LOCAL = "http://" + LOCAL_IP + ":14000"
def URL_PROXY_BASE_STAGING = "https://wallet-proxy.stagenet.concordium.com"
def URL_PROXY_BASE_PROD_TESTNET = "https://wallet-proxy.testnet.concordium.com"
def URL_PROXY_BASE_PRODUCTION = "https://wallet-proxy.mainnet.concordium.software"

def PROVIDER_AUTHORITY_BASE = "software.concordium.mobilewallet.seedphrase.DataFileProvider"
def PROVIDER_AUTHORITY_LOCAL = PROVIDER_AUTHORITY_BASE + "-local"
def PROVIDER_AUTHORITY_MOCK = PROVIDER_AUTHORITY_BASE + "-mock"
def PROVIDER_AUTHORITY_STAGING = PROVIDER_AUTHORITY_BASE + "-staging"
def PROVIDER_AUTHORITY_TESTNET = PROVIDER_AUTHORITY_BASE + "-testnet"
def PROVIDER_AUTHORITY_PROD = PROVIDER_AUTHORITY_BASE

// We provide a compile time random string for identification in order to prevent
// other forked apps to collide
def SCHEME_BASE = "concordiumwallet-" + getRandomString()
def SCHEME_LOCAL = SCHEME_BASE + "-local"
def SCHEME_MOCK = SCHEME_BASE + "-mock"
def SCHEME_STAGING = SCHEME_BASE + "-staging"
def SCHEME_TESTNET = SCHEME_BASE + "-testnet"
def SCHEME_PROD = SCHEME_BASE

def getLocalIPv4() {
    def ip4s = []
    NetworkInterface.getNetworkInterfaces()
            .findAll { it.isUp() && !it.isLoopback() && !it.isVirtual() }
            .each {
                it.getInetAddresses()
                        .findAll { !it.isLoopbackAddress() && it instanceof Inet4Address }
                        .each { ip4s << it.getHostAddress() }
            }
    return ip4s[0]
}

def getRandomString() {
    def key
    String alphabet = (('a'..'k') + ('m'..'z') + ('2'..'9')).join()
    def length = 10
    key = new Random().with {
        (1..length).collect { alphabet[nextInt(alphabet.length())] }.join()
    }
    return key
}

def buildTime() {
    def dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"))
    return dateFormat.format(new Date())
}

def buildTimeTicks() {
    def time = System.currentTimeMillis()
    return time;
}

android {
    compileSdkVersion 33
    defaultConfig {
        applicationId "software.concordium.mobilewallet.seedphrase"
        minSdkVersion 26
        targetSdkVersion 33
        versionCode versionBuildNumberSequential
        versionName "${versionBuildNumberMajor}.${versionBuildNumberMinor}.${versionBuildNumberPatch}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "BUILD_NUMBER", "\"${versionBuildNumberSequential}\"")
        buildConfigField("String", "BUILD_TIME", "\"${buildTime()}\"")
        buildConfigField("String", "BUILD_TIME_TICKS", "\"${buildTimeTicks()}\"")
        buildConfigField("String", "ENV_NAME", "none")
        buildConfigField("boolean", "USE_BACKEND_MOCK", "false")
        buildConfigField("boolean", "USE_LIB_MOCK", "false")
        buildConfigField("boolean", "INCL_DEV_OPTIONS", "false")
        buildConfigField("boolean", "SHOW_GTU_DROP", "false")
        buildConfigField("boolean", "USE_LIBRARY_PROVIDED_IDENTITIES", "true")
        buildConfigField("Long", "ACCOUNT_UPDATE_FREQUENCY_SEC", "60l")

        buildConfigField("boolean", "FAIL_IDENTITY_CREATION", "false")
        buildConfigField("boolean", "FORCE_NO_EMAIL_CLIENTS", "false")

        buildConfigField("String", "VERSION_POSTFIX", "\"\"")

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation": "${project.projectDir}/schemas".toString(),
                        "room.incremental"   : "true"]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            enableUnitTestCoverage true
        }
    }

    flavorDimensions "default"

    productFlavors {
        mock {
            applicationIdSuffix ".mock"

            buildConfigField("String", "EXPORT_CHAIN", "\"mock\"")

            buildConfigField("String", "ENV_NAME", "\"mock\"")
            buildConfigField("String", "URL_PROXY_BASE", "\"${URL_PROXY_BASE_STAGING}\"")

            buildConfigField("boolean", "USE_BACKEND_MOCK", "true")
            buildConfigField("boolean", "USE_LIB_MOCK", "true")
            buildConfigField("boolean", "INCL_DEV_OPTIONS", "true")
            buildConfigField("boolean", "SHOW_GTU_DROP", "true")
            buildConfigField("boolean", "USE_LIBRARY_PROVIDED_IDENTITIES", "false")

            buildConfigField("String", "SCHEME", "\"${SCHEME_MOCK}\"")
            resValue "string", "scheme", "\"${SCHEME_MOCK}\""

            buildConfigField("String", "PROVIDER_AUTHORITY", "\"${PROVIDER_AUTHORITY_MOCK}\"")

            buildConfigField("Long", "ACCOUNT_UPDATE_FREQUENCY_SEC", "60l")
        }

        local {
            applicationIdSuffix ".local"

            buildConfigField("String", "EXPORT_CHAIN", "\"local\"")

            buildConfigField("String", "ENV_NAME", "\"local\"")
            buildConfigField("String", "URL_PROXY_BASE", "\"${URL_PROXY_BASE_LOCAL}\"")

            buildConfigField("boolean", "SHOW_GTU_DROP", "true")
            buildConfigField("boolean", "USE_LIBRARY_PROVIDED_IDENTITIES", "false")

            buildConfigField("String", "SCHEME", "\"${SCHEME_LOCAL}\"")
            resValue "string", "scheme", "\"${SCHEME_LOCAL}\""

            buildConfigField("String", "PROVIDER_AUTHORITY", "\"${PROVIDER_AUTHORITY_LOCAL}\"")

            buildConfigField("Long", "ACCOUNT_UPDATE_FREQUENCY_SEC", "60l")
        }

        staging {
            applicationIdSuffix ".staging"

            buildConfigField("String", "VERSION_POSTFIX", "\" - Stagenet\"")

            buildConfigField("String", "EXPORT_CHAIN", "\"staging\"")
            buildConfigField("String", "ENV_NAME", "\"staging\"")
            buildConfigField("String", "URL_PROXY_BASE", "\"${URL_PROXY_BASE_STAGING}\"")

            buildConfigField("boolean", "FAIL_IDENTITY_CREATION", "false")
            buildConfigField("boolean", "FORCE_NO_EMAIL_CLIENTS", "false")

            buildConfigField("boolean", "SHOW_GTU_DROP", "true")
            buildConfigField("boolean", "USE_LIBRARY_PROVIDED_IDENTITIES", "false")

            buildConfigField("String", "SCHEME", "\"${SCHEME_STAGING}\"")
            resValue "string", "scheme", "\"${SCHEME_STAGING}\""

            buildConfigField("String", "PROVIDER_AUTHORITY", "\"${PROVIDER_AUTHORITY_STAGING}\"")

            buildConfigField("Long", "ACCOUNT_UPDATE_FREQUENCY_SEC", "60l")
        }

        prodTestNet {
            applicationIdSuffix ".testnet"

            buildConfigField("String", "VERSION_POSTFIX", "\" - Testnet\"")

            buildConfigField("String", "EXPORT_CHAIN", "\"testnet\"")
            buildConfigField("String", "ENV_NAME", "\"prod_testnet\"")
            buildConfigField("String", "URL_PROXY_BASE", "\"${URL_PROXY_BASE_PROD_TESTNET}\"")

            buildConfigField("boolean", "SHOW_GTU_DROP", "true")
            buildConfigField("boolean", "USE_LIBRARY_PROVIDED_IDENTITIES", "false")

            buildConfigField("String", "SCHEME", "\"${SCHEME_TESTNET}\"")
            resValue "string", "scheme", "\"${SCHEME_TESTNET}\""

            buildConfigField("String", "PROVIDER_AUTHORITY", "\"${PROVIDER_AUTHORITY_TESTNET}\"")

            buildConfigField("Long", "ACCOUNT_UPDATE_FREQUENCY_SEC", "60l")
        }

        prodMainNet {
            applicationIdSuffix ".mainnet"

            buildConfigField("String", "VERSION_POSTFIX", "\"\"")

            buildConfigField("String", "EXPORT_CHAIN", "\"mainnet\"")
            buildConfigField("String", "ENV_NAME", "\"production\"")
            buildConfigField("String", "URL_PROXY_BASE", "\"${URL_PROXY_BASE_PRODUCTION}\"")
            buildConfigField("boolean", "SHOW_GTU_DROP", "false")
            buildConfigField("boolean", "USE_LIBRARY_PROVIDED_IDENTITIES", "false")

            buildConfigField("String", "SCHEME", "\"${SCHEME_PROD}\"")
            resValue "string", "scheme", "\"${SCHEME_PROD}\""

            buildConfigField("String", "PROVIDER_AUTHORITY", "\"${PROVIDER_AUTHORITY_PROD}\"")

            buildConfigField("Long", "ACCOUNT_UPDATE_FREQUENCY_SEC", "60l")
        }

        // Rename the output file
        android.applicationVariants.all { variant ->
            variant.outputs.all {
                def project = "wallet"
                def SEPARATOR_LINE = "-"
                def SEPARATOR = "_"
                def flavor = variant.productFlavors[0].name
                def buildType = variant.buildType.name
                def version = variant.versionCode
                def date = new Date()
                def formattedDate = date.format('yyyy-MM-dd_HH.mm')
                outputFileName =
                        project + SEPARATOR_LINE +
                                flavor + SEPARATOR_LINE +
                                buildType + SEPARATOR +
                                "v" + variant.versionName +
                                "(" + version + ")" + SEPARATOR +
                                formattedDate + ".apk"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/atomicfu.kotlin_module']
            excludes += ['META-INF/INDEX.LIST']
            excludes += ['META-INF/DEPENDENCIES']
            excludes += ['META-INF/LICENSE.md']
            excludes += ['META-INF/NOTICE.md']
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Coroutines
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"

    // Android/Google
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.biometric:biometric:1.1.0'
    implementation 'androidx.test:core-ktx:1.5.0'
    implementation "androidx.constraintlayout:constraintlayout:2.2.0-alpha09"
    implementation 'androidx.databinding:databinding-runtime:8.0.0'

    // Lifecycles
    def lifecycle_version = "2.5.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation 'androidx.fragment:fragment-ktx:1.5.5'

    // Room
    def room_version = "2.5.0"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    androidTestImplementation "androidx.room:room-testing:$room_version"

    // Barcode
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'

    // Chrome custom tabs
    implementation 'androidx.browser:browser:1.5.0'

    // OkHttp/Retrofit
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'
    implementation "com.squareup.retrofit2:converter-moshi:2.9.0"

    implementation 'com.google.iot.cbor:cbor:0.01.02'

    implementation 'com.google.code.gson:gson:2.9.0'

    // Crypto library
    implementation project(":mobile_wallet_lib-release")

    // Test
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation "androidx.arch.core:core-testing:2.2.0"
    androidTestImplementation 'androidx.test:runner:1.5.2'
    testImplementation "org.robolectric:robolectric:4.9.2"

    // Generate QR
    implementation 'com.journeyapps:zxing-android-embedded:4.1.0'

    // EventBus
    implementation 'org.greenrobot:eventbus:3.1.1'

    // BIP39
    implementation "cash.z.ecc.android:kotlin-bip39:1.0.4"

    implementation("com.walletconnect:android-core:1.5.0")
    implementation("com.walletconnect:sign:2.3.0")

    implementation 'com.github.bumptech.glide:glide:4.14.2'
    kapt 'com.github.bumptech.glide:compiler:4.14.2'
    implementation 'com.caverock:androidsvg-aar:1.4'

    
    implementation 'com.github.matomo-org:matomo-sdk-android:4.1.4'

    implementation("org.jetbrains.kotlin:kotlin-reflect:1.8.10")

    implementation "androidx.security:security-crypto:1.0.0"

    // Koin is simple Dependency injection framework.
    // This dependency will help separate architectural layers and ease testing with mock objects.
    def koin_version = "3.4.0"
    implementation "io.insert-koin:koin-android:$koin_version"
    implementation "io.insert-koin:koin-androidx-workmanager:$koin_version"
    implementation "io.insert-koin:koin-androidx-navigation:$koin_version"

    // Added standard Jetpack Compose Navigation. This will ease navigation management.
    def nav_version = "2.5.3"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"
    implementation "androidx.navigation:navigation-compose:$nav_version"
}
